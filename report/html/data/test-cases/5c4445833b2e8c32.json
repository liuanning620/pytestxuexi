{
  "uid" : "5c4445833b2e8c32",
  "name" : "用例id:id-001;用例名称:登录alan1;",
  "fullName" : "testcase.test_excel_case.TestExcelCase#test_case_run",
  "historyId" : "2d2e45ebd3ad4222aff1be9d28838331",
  "time" : {
    "start" : 1680574745336,
    "stop" : 1680574745350,
    "duration" : 14
  },
  "description" : "请求方法:post; 请求url:http://127.0.0.1:5000/login; 预期结果：登录成功;",
  "descriptionHtml" : "<p>请求方法:post; 请求url:http://127.0.0.1:5000/login; 预期结果：登录成功;</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <testcase.test_excel_case.TestExcelCase object at 0x00000253BD99A7F0>\ncase = {'cookies': '', 'headers': '', 'status_code': 200.0, 'url': '/login', ...}\n\n    @pytest.mark.parametrize(\"case\", case_run_list)\n    def test_case_run(self, case):\n        # print(\"调用方法test_case_run(),parametrize获取所有需要运行的用例\")\n        # case_key = ExcelConf.ExcelColumnConfig()\n        case_url = ConfigYaml().get_conf_host_url() + case[case_key.case_url]\n        case_id = case[case_key.case_id]\n        case_model = case[case_key.case_model]\n        case_name = case[case_key.case_name]\n        case_precondition = case[case_key.case_precondition]\n        case_method = case[case_key.case_method]\n        case_params_type = case[case_key.case_params_type]\n        case_params = case[case_key.case_params]\n        case_expect_result = case[case_key.case_expect_result]\n        case_content = case[case_key.case_content]\n        case_headers = case[case_key.case_headers]\n        case_cookies = case[case_key.case_cookies]\n        case_code = case[case_key.case_code]\n        case_db_verify = case[case_key.case_db_verify]\n        # 如果headers存在，就转换成json格式\n        headers = Base.json_data(case_headers)\n        # 如果cookies存在，就转换成json格式\n        cookies = Base.json_data(case_cookies)\n    \n        if case_precondition:\n            # 获取前置测试用例\n            precondition = case_run_data.get_case_precondition(case_precondition)\n            print(\"存在前置条件，获取前置用例的case所有信息，前置用例执行结果如下\")\n            # print(\"前置条件：%s\" % precondition)\n            res_precoondition = self.run_case_precondition(precondition)\n            header, cookie = self.get_correlation(headers, cookies, res_precoondition)\n            # 如果headers存在，就转换成json格式\n            headers = Base.json_data(header)\n            # 如果cookies存在，就转换成json格式\n            cookies = Base.json_data(cookie)\n        # 调用公共方法：请求\n        res = self.case_public_func(url=case_url, method=case_method, params=case_params, headers=headers,\n                                    cookies=cookies)\n        print(\"需要运行的用例执行结果：%s\"%res)\n    \n        # 因为上面 @pytest.mark.parametrize(t),所以动态获取allure.dynamic.feature()\n        allure.dynamic.feature(case_sheet_name)\n        allure.dynamic.story(case_model)\n        allure.dynamic.title(\"用例id:{};用例名称:{};\".format(case_id, case_name))\n        allure.dynamic.description(\"请求方法:{}; 请求url:{}; 预期结果：{};\".format(case_method, case_url,case_expect_result))\n    \n    \n        assert_util = AssertUtil()\n        assert_util.assert_code(int(res['code']), int(case_code))\n>       assert_util.assert_in_body(str(res), str(case_expect_result))\n\ntest_excel_case.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUtil.AssertUtil object at 0x00000253BD99A6D0>\nbody = '\"{\\'code\\': 200, \\'data\\': {\\'phone\\': \\'13021111161\\', \\'token\\': \\'aaa111\\', \\'userid\\': 9, \\'username\\': \\'alan1\\'}, \\'msg\\': \\'\\\\u767b\\\\u5f55\\\\u6210\\\\u529f\\'}\"'\nexpected_body = '登录成功'\n\n    def assert_in_body(self,body,expected_body):\n    \n        try:\n            body = json.dumps(body)\n>           assert expected_body in body\nE           AssertionError\n\n..\\utils\\AssertUtil.py:44: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "请求方法:post; 请求url:http://127.0.0.1:5000/login; 预期结果：登录成功;",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <testcase.test_excel_case.TestExcelCase object at 0x00000253BD99A7F0>\ncase = {'cookies': '', 'headers': '', 'status_code': 200.0, 'url': '/login', ...}\n\n    @pytest.mark.parametrize(\"case\", case_run_list)\n    def test_case_run(self, case):\n        # print(\"调用方法test_case_run(),parametrize获取所有需要运行的用例\")\n        # case_key = ExcelConf.ExcelColumnConfig()\n        case_url = ConfigYaml().get_conf_host_url() + case[case_key.case_url]\n        case_id = case[case_key.case_id]\n        case_model = case[case_key.case_model]\n        case_name = case[case_key.case_name]\n        case_precondition = case[case_key.case_precondition]\n        case_method = case[case_key.case_method]\n        case_params_type = case[case_key.case_params_type]\n        case_params = case[case_key.case_params]\n        case_expect_result = case[case_key.case_expect_result]\n        case_content = case[case_key.case_content]\n        case_headers = case[case_key.case_headers]\n        case_cookies = case[case_key.case_cookies]\n        case_code = case[case_key.case_code]\n        case_db_verify = case[case_key.case_db_verify]\n        # 如果headers存在，就转换成json格式\n        headers = Base.json_data(case_headers)\n        # 如果cookies存在，就转换成json格式\n        cookies = Base.json_data(case_cookies)\n    \n        if case_precondition:\n            # 获取前置测试用例\n            precondition = case_run_data.get_case_precondition(case_precondition)\n            print(\"存在前置条件，获取前置用例的case所有信息，前置用例执行结果如下\")\n            # print(\"前置条件：%s\" % precondition)\n            res_precoondition = self.run_case_precondition(precondition)\n            header, cookie = self.get_correlation(headers, cookies, res_precoondition)\n            # 如果headers存在，就转换成json格式\n            headers = Base.json_data(header)\n            # 如果cookies存在，就转换成json格式\n            cookies = Base.json_data(cookie)\n        # 调用公共方法：请求\n        res = self.case_public_func(url=case_url, method=case_method, params=case_params, headers=headers,\n                                    cookies=cookies)\n        print(\"需要运行的用例执行结果：%s\"%res)\n    \n        # 因为上面 @pytest.mark.parametrize(t),所以动态获取allure.dynamic.feature()\n        allure.dynamic.feature(case_sheet_name)\n        allure.dynamic.story(case_model)\n        allure.dynamic.title(\"用例id:{};用例名称:{};\".format(case_id, case_name))\n        allure.dynamic.description(\"请求方法:{}; 请求url:{}; 预期结果：{};\".format(case_method, case_url,case_expect_result))\n    \n    \n        assert_util = AssertUtil()\n        assert_util.assert_code(int(res['code']), int(case_code))\n>       assert_util.assert_in_body(str(res), str(case_expect_result))\n\ntest_excel_case.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUtil.AssertUtil object at 0x00000253BD99A6D0>\nbody = '\"{\\'code\\': 200, \\'data\\': {\\'phone\\': \\'13021111161\\', \\'token\\': \\'aaa111\\', \\'userid\\': 9, \\'username\\': \\'alan1\\'}, \\'msg\\': \\'\\\\u767b\\\\u5f55\\\\u6210\\\\u529f\\'}\"'\nexpected_body = '登录成功'\n\n    def assert_in_body(self,body,expected_body):\n    \n        try:\n            body = json.dumps(body)\n>           assert expected_body in body\nE           AssertionError\n\n..\\utils\\AssertUtil.py:44: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "afea4d5207778ba1",
      "name" : "log",
      "source" : "afea4d5207778ba1.txt",
      "type" : "text/plain",
      "size" : 305
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Sheet1"
  }, {
    "name" : "story",
    "value" : "lan"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_excel_case"
  }, {
    "name" : "subSuite",
    "value" : "TestExcelCase"
  }, {
    "name" : "host",
    "value" : "DESKTOP-RGVFMBO"
  }, {
    "name" : "thread",
    "value" : "13464-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_excel_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'用例ID': 'id-001', '模块': 'lan', '接口名称': '登录alan1', 'url': '/login', '前置条件': '', '请求类型': 'post', '请求参数类型': 'json', '请求参数': '{\"username\": \"alan1\",\"password\": \"111111\"}', '预期结果': '登录成功', '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "5c4445833b2e8c32.json",
  "parameterValues" : [ "{'用例ID': 'id-001', '模块': 'lan', '接口名称': '登录alan1', 'url': '/login', '前置条件': '', '请求类型': 'post', '请求参数类型': 'json', '请求参数': '{\"username\": \"alan1\",\"password\": \"111111\"}', '预期结果': '登录成功', '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}" ]
}